// Generated by CoffeeScript 1.6.2
(function() {
  var Cache, cache,
    __slice = [].slice;

  Cache = (function() {
    function Cache() {
      this.clear();
    }

    Cache.prototype.set = function(id, block) {
      return this.table[this._idString(id)] = this._use(block);
    };

    Cache.prototype.unset = function(id) {
      return delete this.table[this._idString(id)];
    };

    Cache.prototype.get = function(id, block) {
      var _base, _name;

      return (_base = this.table)[_name = this._idString(id)] || (_base[_name] = (block ? this._use(block) : null));
    };

    Cache.prototype.clear = function() {
      return this.table = {};
    };

    Cache.prototype._use = function(obj) {
      if (typeof obj === "function") {
        return obj();
      } else {
        return obj;
      }
    };

    Cache.prototype._idString = function(obj) {
      var _this = this;

      if (typeof obj === "string") {
        return obj;
      } else if (typeof obj === "function") {
        if (obj.name !== "") {
          return obj.name;
        } else {
          return obj.toString();
        }
      } else if (obj.constructor === Array) {
        return _.map(obj, function(item) {
          return _this._idString(item);
        }).join(":");
      } else {
        return _.map(obj, function(k, v) {
          return "" + (_this._idString(k)) + ":" + (_this._idString(v));
        }).join(":");
      }
    };

    return Cache;

  })();

  cache = new Cache;

  Backbone.Model.cache = cache;

  Backbone.Model.fetch = function() {
    var args, id,
      _this = this;

    id = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return cache.get([this, id], function() {
      var item;

      item = new _this;
      item.id = id;
      item.fetch.apply(item, args);
      return item;
    });
  };

  Backbone.Model.prototype.cache = function() {
    return cache.set([this, this.id], this);
  };

  Backbone.Model.prototype.uncache = function() {
    return cache.unset([this, this.id]);
  };

}).call(this);
